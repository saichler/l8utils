// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: tests.proto

package tests

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyString           string                   `protobuf:"bytes,1,opt,name=myString,proto3" json:"myString,omitempty"`
	MyInt32            int32                    `protobuf:"varint,2,opt,name=myInt32,proto3" json:"myInt32,omitempty"`
	MyInt64            int64                    `protobuf:"varint,3,opt,name=myInt64,proto3" json:"myInt64,omitempty"`
	MyFloat32          float32                  `protobuf:"fixed32,4,opt,name=myFloat32,proto3" json:"myFloat32,omitempty"`
	MyFloat64          float64                  `protobuf:"fixed64,5,opt,name=myFloat64,proto3" json:"myFloat64,omitempty"`
	MySingle           *TestProtoSub            `protobuf:"bytes,6,opt,name=mySingle,proto3" json:"mySingle,omitempty"`
	MyStringSlice      []string                 `protobuf:"bytes,7,rep,name=myStringSlice,proto3" json:"myStringSlice,omitempty"`
	MyInt32Slice       []int32                  `protobuf:"varint,8,rep,packed,name=myInt32Slice,proto3" json:"myInt32Slice,omitempty"`
	MyModelSlice       []*TestProtoSub          `protobuf:"bytes,9,rep,name=myModelSlice,proto3" json:"myModelSlice,omitempty"`
	MyString2StringMap map[string]string        `protobuf:"bytes,10,rep,name=MyString2StringMap,proto3" json:"MyString2StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MyInt32ToInt64Map  map[int32]int64          `protobuf:"bytes,11,rep,name=MyInt32ToInt64Map,proto3" json:"MyInt32ToInt64Map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MyString2ModelMap  map[string]*TestProtoSub `protobuf:"bytes,12,rep,name=MyString2ModelMap,proto3" json:"MyString2ModelMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MyBool             bool                     `protobuf:"varint,13,opt,name=myBool,proto3" json:"myBool,omitempty"`
}

func (x *TestProto) Reset() {
	*x = TestProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestProto) ProtoMessage() {}

func (x *TestProto) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestProto.ProtoReflect.Descriptor instead.
func (*TestProto) Descriptor() ([]byte, []int) {
	return file_tests_proto_rawDescGZIP(), []int{0}
}

func (x *TestProto) GetMyString() string {
	if x != nil {
		return x.MyString
	}
	return ""
}

func (x *TestProto) GetMyInt32() int32 {
	if x != nil {
		return x.MyInt32
	}
	return 0
}

func (x *TestProto) GetMyInt64() int64 {
	if x != nil {
		return x.MyInt64
	}
	return 0
}

func (x *TestProto) GetMyFloat32() float32 {
	if x != nil {
		return x.MyFloat32
	}
	return 0
}

func (x *TestProto) GetMyFloat64() float64 {
	if x != nil {
		return x.MyFloat64
	}
	return 0
}

func (x *TestProto) GetMySingle() *TestProtoSub {
	if x != nil {
		return x.MySingle
	}
	return nil
}

func (x *TestProto) GetMyStringSlice() []string {
	if x != nil {
		return x.MyStringSlice
	}
	return nil
}

func (x *TestProto) GetMyInt32Slice() []int32 {
	if x != nil {
		return x.MyInt32Slice
	}
	return nil
}

func (x *TestProto) GetMyModelSlice() []*TestProtoSub {
	if x != nil {
		return x.MyModelSlice
	}
	return nil
}

func (x *TestProto) GetMyString2StringMap() map[string]string {
	if x != nil {
		return x.MyString2StringMap
	}
	return nil
}

func (x *TestProto) GetMyInt32ToInt64Map() map[int32]int64 {
	if x != nil {
		return x.MyInt32ToInt64Map
	}
	return nil
}

func (x *TestProto) GetMyString2ModelMap() map[string]*TestProtoSub {
	if x != nil {
		return x.MyString2ModelMap
	}
	return nil
}

func (x *TestProto) GetMyBool() bool {
	if x != nil {
		return x.MyBool
	}
	return false
}

type TestProtoSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyString string `protobuf:"bytes,1,opt,name=myString,proto3" json:"myString,omitempty"`
	MyInt64  int64  `protobuf:"varint,2,opt,name=myInt64,proto3" json:"myInt64,omitempty"`
}

func (x *TestProtoSub) Reset() {
	*x = TestProtoSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestProtoSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestProtoSub) ProtoMessage() {}

func (x *TestProtoSub) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestProtoSub.ProtoReflect.Descriptor instead.
func (*TestProtoSub) Descriptor() ([]byte, []int) {
	return file_tests_proto_rawDescGZIP(), []int{1}
}

func (x *TestProtoSub) GetMyString() string {
	if x != nil {
		return x.MyString
	}
	return ""
}

func (x *TestProtoSub) GetMyInt64() int64 {
	if x != nil {
		return x.MyInt64
	}
	return 0
}

var File_tests_proto protoreflect.FileDescriptor

var file_tests_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x22, 0xd3, 0x06, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x79, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x79, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x2f,
	0x0a, 0x08, 0x6d, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x08, 0x6d, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x79, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x75, 0x62, 0x52, 0x0c, 0x6d, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x11,
	0x4d, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61,
	0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x79, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x4d, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x11, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x79,
	0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x1a, 0x45, 0x0a, 0x17, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x79, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x59, 0x0a, 0x16, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x24, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x42, 0x05, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50, 0x01, 0x5a, 0x07, 0x2e,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_rawDescOnce sync.Once
	file_tests_proto_rawDescData = file_tests_proto_rawDesc
)

func file_tests_proto_rawDescGZIP() []byte {
	file_tests_proto_rawDescOnce.Do(func() {
		file_tests_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_rawDescData)
	})
	return file_tests_proto_rawDescData
}

var file_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tests_proto_goTypes = []interface{}{
	(*TestProto)(nil),    // 0: tests.TestProto
	(*TestProtoSub)(nil), // 1: tests.TestProtoSub
	nil,                  // 2: tests.TestProto.MyString2StringMapEntry
	nil,                  // 3: tests.TestProto.MyInt32ToInt64MapEntry
	nil,                  // 4: tests.TestProto.MyString2ModelMapEntry
}
var file_tests_proto_depIdxs = []int32{
	1, // 0: tests.TestProto.mySingle:type_name -> tests.TestProtoSub
	1, // 1: tests.TestProto.myModelSlice:type_name -> tests.TestProtoSub
	2, // 2: tests.TestProto.MyString2StringMap:type_name -> tests.TestProto.MyString2StringMapEntry
	3, // 3: tests.TestProto.MyInt32ToInt64Map:type_name -> tests.TestProto.MyInt32ToInt64MapEntry
	4, // 4: tests.TestProto.MyString2ModelMap:type_name -> tests.TestProto.MyString2ModelMapEntry
	1, // 5: tests.TestProto.MyString2ModelMapEntry.value:type_name -> tests.TestProtoSub
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_tests_proto_init() }
func file_tests_proto_init() {
	if File_tests_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestProtoSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_goTypes,
		DependencyIndexes: file_tests_proto_depIdxs,
		MessageInfos:      file_tests_proto_msgTypes,
	}.Build()
	File_tests_proto = out.File
	file_tests_proto_rawDesc = nil
	file_tests_proto_goTypes = nil
	file_tests_proto_depIdxs = nil
}
