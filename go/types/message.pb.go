// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: message.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The action the message will invoke on the handler
type Action int32

const (
	Action_Invalid_Action Action = 0
	Action_POST           Action = 1
	Action_PUT            Action = 2
	Action_PATCH          Action = 3
	Action_DELETE         Action = 4
	Action_GET            Action = 5
	Action_Reply          Action = 6
	Action_Notify         Action = 7
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "Invalid_Action",
		1: "POST",
		2: "PUT",
		3: "PATCH",
		4: "DELETE",
		5: "GET",
		6: "Reply",
		7: "Notify",
	}
	Action_value = map[string]int32{
		"Invalid_Action": 0,
		"POST":           1,
		"PUT":            2,
		"PATCH":          3,
		"DELETE":         4,
		"GET":            5,
		"Reply":          6,
		"Notify":         7,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

// The priority of the message
type Priority int32

const (
	Priority_P0 Priority = 0
	Priority_P1 Priority = 1
	Priority_P2 Priority = 2
	Priority_P3 Priority = 3
	Priority_P4 Priority = 4
	Priority_P5 Priority = 5
	Priority_P6 Priority = 6
	Priority_P7 Priority = 7
)

// Enum value maps for Priority.
var (
	Priority_name = map[int32]string{
		0: "P0",
		1: "P1",
		2: "P2",
		3: "P3",
		4: "P4",
		5: "P5",
		6: "P6",
		7: "P7",
	}
	Priority_value = map[string]int32{
		"P0": 0,
		"P1": 1,
		"P2": 2,
		"P3": 3,
		"P4": 4,
		"P5": 5,
		"P6": 6,
		"P7": 7,
	}
)

func (x Priority) Enum() *Priority {
	p := new(Priority)
	*p = x
	return p
}

func (x Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (Priority) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority.Descriptor instead.
func (Priority) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

// Cast mode
type CastMode int32

const (
	CastMode_Invalid_Cast_mode CastMode = 0
	CastMode_All               CastMode = 1
	CastMode_Single            CastMode = 2
	CastMode_Leader            CastMode = 3
)

// Enum value maps for CastMode.
var (
	CastMode_name = map[int32]string{
		0: "Invalid_Cast_mode",
		1: "All",
		2: "Single",
		3: "Leader",
	}
	CastMode_value = map[string]int32{
		"Invalid_Cast_mode": 0,
		"All":               1,
		"Single":            2,
		"Leader":            3,
	}
)

func (x CastMode) Enum() *CastMode {
	p := new(CastMode)
	*p = x
	return p
}

func (x CastMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CastMode) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[2].Descriptor()
}

func (CastMode) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[2]
}

func (x CastMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CastMode.Descriptor instead.
func (CastMode) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

type TrState int32

const (
	TrState_Invalid_Transaction_State TrState = 0
	TrState_Lock                      TrState = 1
	TrState_Locked                    TrState = 2
	TrState_Commit                    TrState = 3
	TrState_Commited                  TrState = 4
	TrState_Rollback                  TrState = 5
	TrState_Rollbacked                TrState = 6
	TrState_Clean                     TrState = 7
	TrState_Cleaned                   TrState = 8
	TrState_Errored                   TrState = 9
	TrState_Created                   TrState = 10
	TrState_Pending                   TrState = 11
	TrState_LockFailed                TrState = 12
)

// Enum value maps for TrState.
var (
	TrState_name = map[int32]string{
		0:  "Invalid_Transaction_State",
		1:  "Lock",
		2:  "Locked",
		3:  "Commit",
		4:  "Commited",
		5:  "Rollback",
		6:  "Rollbacked",
		7:  "Clean",
		8:  "Cleaned",
		9:  "Errored",
		10: "Created",
		11: "Pending",
		12: "LockFailed",
	}
	TrState_value = map[string]int32{
		"Invalid_Transaction_State": 0,
		"Lock":                      1,
		"Locked":                    2,
		"Commit":                    3,
		"Commited":                  4,
		"Rollback":                  5,
		"Rollbacked":                6,
		"Clean":                     7,
		"Cleaned":                   8,
		"Errored":                   9,
		"Created":                   10,
		"Pending":                   11,
		"LockFailed":                12,
	}
)

func (x TrState) Enum() *TrState {
	p := new(TrState)
	*p = x
	return p
}

func (x TrState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrState) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[3].Descriptor()
}

func (TrState) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[3]
}

func (x TrState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrState.Descriptor instead.
func (TrState) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

type HealthState int32

const (
	HealthState_Invalid_State HealthState = 0
	HealthState_Up            HealthState = 1
	HealthState_Down          HealthState = 2
	HealthState_Unreachable   HealthState = 3
)

// Enum value maps for HealthState.
var (
	HealthState_name = map[int32]string{
		0: "Invalid_State",
		1: "Up",
		2: "Down",
		3: "Unreachable",
	}
	HealthState_value = map[string]int32{
		"Invalid_State": 0,
		"Up":            1,
		"Down":          2,
		"Unreachable":   3,
	}
)

func (x HealthState) Enum() *HealthState {
	p := new(HealthState)
	*p = x
	return p
}

func (x HealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[4].Descriptor()
}

func (HealthState) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[4]
}

func (x HealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthState.Descriptor instead.
func (HealthState) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

// Message is to transmit a piece of data, securely, from one process to one or more processes via
// Publish/Subscribe or Reuest/Reply
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source uuid identifier of the message sender
	SourceUuid string `protobuf:"bytes,1,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	// The source uuid identifier of the message sender switch
	SourceVnetUuid string `protobuf:"bytes,2,opt,name=source_vnet_uuid,json=sourceVnetUuid,proto3" json:"source_vnet_uuid,omitempty"`
	// The vlan of the message
	Vlan int32 `protobuf:"varint,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// The topic of the multicast
	Topic string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	// To uniquely identify the source message, the sender process maintain a sequence number.
	Sequence int32 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Priority of this Message for the handler callback.
	Priority Priority `protobuf:"varint,6,opt,name=priority,proto3,enum=types.Priority" json:"priority,omitempty"`
	// The protobuf marshaled data, encoded to base64 string
	Data string `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	// The type name of the serialized data
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// Action to invoke with this data on the service point
	Action Action `protobuf:"varint,9,opt,name=action,proto3,enum=types.Action" json:"action,omitempty"`
	// timeout when request/reply
	Timeout int64 `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// If this a fail notification, what is the failing info
	FailMsg string `protobuf:"bytes,11,opt,name=fail_msg,json=failMsg,proto3" json:"fail_msg,omitempty"`
	// If this message needs a reply message
	IsRequest bool `protobuf:"varint,12,opt,name=is_request,json=isRequest,proto3" json:"is_request,omitempty"`
	IsReply   bool `protobuf:"varint,13,opt,name=is_reply,json=isReply,proto3" json:"is_reply,omitempty"`
	Tr        *Tr  `protobuf:"bytes,14,opt,name=tr,proto3" json:"tr,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *Message) GetSourceVnetUuid() string {
	if x != nil {
		return x.SourceVnetUuid
	}
	return ""
}

func (x *Message) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *Message) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Message) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Message) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_P0
}

func (x *Message) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Message) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_Invalid_Action
}

func (x *Message) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Message) GetFailMsg() string {
	if x != nil {
		return x.FailMsg
	}
	return ""
}

func (x *Message) GetIsRequest() bool {
	if x != nil {
		return x.IsRequest
	}
	return false
}

func (x *Message) GetIsReply() bool {
	if x != nil {
		return x.IsReply
	}
	return false
}

func (x *Message) GetTr() *Tr {
	if x != nil {
		return x.Tr
	}
	return nil
}

type Tr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State     TrState `protobuf:"varint,2,opt,name=state,proto3,enum=types.TrState" json:"state,omitempty"`
	Error     string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	StartTime int64   `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *Tr) Reset() {
	*x = Tr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tr) ProtoMessage() {}

func (x *Tr) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tr.ProtoReflect.Descriptor instead.
func (*Tr) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *Tr) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tr) GetState() TrState {
	if x != nil {
		return x.State
	}
	return TrState_Invalid_Transaction_State
}

func (x *Tr) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Tr) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// A config for the messages limitation and data size
type VNicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum data size for a message
	MaxDataSize uint64 `protobuf:"varint,1,opt,name=max_data_size,json=maxDataSize,proto3" json:"max_data_size,omitempty"`
	// The transmit message queue size
	TxQueueSize uint64 `protobuf:"varint,2,opt,name=tx_queue_size,json=txQueueSize,proto3" json:"tx_queue_size,omitempty"`
	// The received message queue size
	RxQueueSize uint64 `protobuf:"varint,3,opt,name=rx_queue_size,json=rxQueueSize,proto3" json:"rx_queue_size,omitempty"`
	// What is the switch port for this configuration
	VnetPort uint32 `protobuf:"varint,4,opt,name=vnet_port,json=vnetPort,proto3" json:"vnet_port,omitempty"`
	// The local uuid
	LocalUuid string `protobuf:"bytes,5,opt,name=local_uuid,json=localUuid,proto3" json:"local_uuid,omitempty"`
	// The remote uuid
	RemoteUuid string `protobuf:"bytes,6,opt,name=remote_uuid,json=remoteUuid,proto3" json:"remote_uuid,omitempty"`
	// The address of the connection initiator, regardless of the side.
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// force external mode in case two switches are on the same machine
	// woth different ports
	ForceExternal bool `protobuf:"varint,8,opt,name=force_external,json=forceExternal,proto3" json:"force_external,omitempty"`
	// Custom local alias for this vnic
	LocalAlias string `protobuf:"bytes,9,opt,name=local_alias,json=localAlias,proto3" json:"local_alias,omitempty"`
	// Custom remote alias for this vnic
	RemoteAlias string `protobuf:"bytes,10,opt,name=remote_alias,json=remoteAlias,proto3" json:"remote_alias,omitempty"`
	// Service Topics
	Topics *Topics `protobuf:"bytes,11,opt,name=topics,proto3" json:"topics,omitempty"`
	// Keep Alive interval in Seconds
	KeepAliveIntervalSeconds int64 `protobuf:"varint,12,opt,name=keep_alive_interval_seconds,json=keepAliveIntervalSeconds,proto3" json:"keep_alive_interval_seconds,omitempty"`
}

func (x *VNicConfig) Reset() {
	*x = VNicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNicConfig) ProtoMessage() {}

func (x *VNicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNicConfig.ProtoReflect.Descriptor instead.
func (*VNicConfig) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *VNicConfig) GetMaxDataSize() uint64 {
	if x != nil {
		return x.MaxDataSize
	}
	return 0
}

func (x *VNicConfig) GetTxQueueSize() uint64 {
	if x != nil {
		return x.TxQueueSize
	}
	return 0
}

func (x *VNicConfig) GetRxQueueSize() uint64 {
	if x != nil {
		return x.RxQueueSize
	}
	return 0
}

func (x *VNicConfig) GetVnetPort() uint32 {
	if x != nil {
		return x.VnetPort
	}
	return 0
}

func (x *VNicConfig) GetLocalUuid() string {
	if x != nil {
		return x.LocalUuid
	}
	return ""
}

func (x *VNicConfig) GetRemoteUuid() string {
	if x != nil {
		return x.RemoteUuid
	}
	return ""
}

func (x *VNicConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VNicConfig) GetForceExternal() bool {
	if x != nil {
		return x.ForceExternal
	}
	return false
}

func (x *VNicConfig) GetLocalAlias() string {
	if x != nil {
		return x.LocalAlias
	}
	return ""
}

func (x *VNicConfig) GetRemoteAlias() string {
	if x != nil {
		return x.RemoteAlias
	}
	return ""
}

func (x *VNicConfig) GetTopics() *Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *VNicConfig) GetKeepAliveIntervalSeconds() int64 {
	if x != nil {
		return x.KeepAliveIntervalSeconds
	}
	return 0
}

type Topics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicToVlan map[string]*Vlans `protobuf:"bytes,1,rep,name=topic_to_vlan,json=topicToVlan,proto3" json:"topic_to_vlan,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Topics) Reset() {
	*x = Topics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topics) ProtoMessage() {}

func (x *Topics) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topics.ProtoReflect.Descriptor instead.
func (*Topics) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *Topics) GetTopicToVlan() map[string]*Vlans {
	if x != nil {
		return x.TopicToVlan
	}
	return nil
}

type Vlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlans map[int32]bool `protobuf:"bytes,1,rep,name=vlans,proto3" json:"vlans,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Vlans) Reset() {
	*x = Vlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vlans) ProtoMessage() {}

func (x *Vlans) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vlans.ProtoReflect.Descriptor instead.
func (*Vlans) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *Vlans) GetVlans() map[int32]bool {
	if x != nil {
		return x.Vlans
	}
	return nil
}

type HealthPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AUuid     string            `protobuf:"bytes,1,opt,name=a_uuid,json=aUuid,proto3" json:"a_uuid,omitempty"`
	ZUuid     string            `protobuf:"bytes,2,opt,name=z_uuid,json=zUuid,proto3" json:"z_uuid,omitempty"`
	Alias     string            `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Topics    *Topics           `protobuf:"bytes,4,opt,name=topics,proto3" json:"topics,omitempty"`
	Status    HealthState       `protobuf:"varint,5,opt,name=status,proto3,enum=types.HealthState" json:"status,omitempty"`
	Stats     *HealthPointStats `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	StartTime int64             `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IsVnet    bool              `protobuf:"varint,8,opt,name=is_vnet,json=isVnet,proto3" json:"is_vnet,omitempty"`
}

func (x *HealthPoint) Reset() {
	*x = HealthPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthPoint) ProtoMessage() {}

func (x *HealthPoint) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthPoint.ProtoReflect.Descriptor instead.
func (*HealthPoint) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *HealthPoint) GetAUuid() string {
	if x != nil {
		return x.AUuid
	}
	return ""
}

func (x *HealthPoint) GetZUuid() string {
	if x != nil {
		return x.ZUuid
	}
	return ""
}

func (x *HealthPoint) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *HealthPoint) GetTopics() *Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *HealthPoint) GetStatus() HealthState {
	if x != nil {
		return x.Status
	}
	return HealthState_Invalid_State
}

func (x *HealthPoint) GetStats() *HealthPointStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *HealthPoint) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HealthPoint) GetIsVnet() bool {
	if x != nil {
		return x.IsVnet
	}
	return false
}

type HealthPointStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastMsgTime int64   `protobuf:"varint,1,opt,name=last_msg_time,json=lastMsgTime,proto3" json:"last_msg_time,omitempty"`
	TxMsgCount  int64   `protobuf:"varint,2,opt,name=tx_msg_count,json=txMsgCount,proto3" json:"tx_msg_count,omitempty"`
	TxDataCount int64   `protobuf:"varint,3,opt,name=tx_data_count,json=txDataCount,proto3" json:"tx_data_count,omitempty"`
	RxMsgCount  int64   `protobuf:"varint,4,opt,name=rx_msg_count,json=rxMsgCount,proto3" json:"rx_msg_count,omitempty"`
	RxDataCont  int64   `protobuf:"varint,5,opt,name=rx_data_cont,json=rxDataCont,proto3" json:"rx_data_cont,omitempty"`
	MemoryUsage uint64  `protobuf:"varint,6,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	CpuUsage    float64 `protobuf:"fixed64,7,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
}

func (x *HealthPointStats) Reset() {
	*x = HealthPointStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthPointStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthPointStats) ProtoMessage() {}

func (x *HealthPointStats) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthPointStats.ProtoReflect.Descriptor instead.
func (*HealthPointStats) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *HealthPointStats) GetLastMsgTime() int64 {
	if x != nil {
		return x.LastMsgTime
	}
	return 0
}

func (x *HealthPointStats) GetTxMsgCount() int64 {
	if x != nil {
		return x.TxMsgCount
	}
	return 0
}

func (x *HealthPointStats) GetTxDataCount() int64 {
	if x != nil {
		return x.TxDataCount
	}
	return 0
}

func (x *HealthPointStats) GetRxMsgCount() int64 {
	if x != nil {
		return x.RxMsgCount
	}
	return 0
}

func (x *HealthPointStats) GetRxDataCont() int64 {
	if x != nil {
		return x.RxDataCont
	}
	return 0
}

func (x *HealthPointStats) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *HealthPointStats) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x6e,
	0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6e, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19,
	0x0a, 0x02, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x52, 0x02, 0x74, 0x72, 0x22, 0x6f, 0x0a, 0x02, 0x54, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x0a, 0x56,
	0x4e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x78, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6e, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x3d,
	0x0a, 0x1b, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x6f, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x6f, 0x56, 0x6c, 0x61, 0x6e, 0x1a, 0x4c, 0x0a, 0x10,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x6f, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x05, 0x56, 0x6c,
	0x61, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x73,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x6c, 0x61,
	0x6e, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x02, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x7a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x7a, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x25, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x56, 0x6e, 0x65, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x78, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x78, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x78, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72,
	0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x78, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x66, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x10, 0x07, 0x2a, 0x4a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x30, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x31, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x32, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x33, 0x10,
	0x03, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x34, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x35, 0x10,
	0x05, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x36, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x37, 0x10,
	0x07, 0x2a, 0x42, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x43, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x10, 0x03, 0x2a, 0xc5, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65,
	0x64, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0a,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x0b, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0c, 0x2a, 0x43, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x55, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x03, 0x42, 0x24, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x01, 0x5a,
	0x07, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_message_proto_goTypes = []interface{}{
	(Action)(0),              // 0: types.Action
	(Priority)(0),            // 1: types.Priority
	(CastMode)(0),            // 2: types.CastMode
	(TrState)(0),             // 3: types.TrState
	(HealthState)(0),         // 4: types.HealthState
	(*Message)(nil),          // 5: types.Message
	(*Tr)(nil),               // 6: types.Tr
	(*VNicConfig)(nil),       // 7: types.VNicConfig
	(*Topics)(nil),           // 8: types.Topics
	(*Vlans)(nil),            // 9: types.Vlans
	(*HealthPoint)(nil),      // 10: types.HealthPoint
	(*HealthPointStats)(nil), // 11: types.HealthPointStats
	nil,                      // 12: types.Topics.TopicToVlanEntry
	nil,                      // 13: types.Vlans.VlansEntry
}
var file_message_proto_depIdxs = []int32{
	1,  // 0: types.Message.priority:type_name -> types.Priority
	0,  // 1: types.Message.action:type_name -> types.Action
	6,  // 2: types.Message.tr:type_name -> types.Tr
	3,  // 3: types.Tr.state:type_name -> types.TrState
	8,  // 4: types.VNicConfig.topics:type_name -> types.Topics
	12, // 5: types.Topics.topic_to_vlan:type_name -> types.Topics.TopicToVlanEntry
	13, // 6: types.Vlans.vlans:type_name -> types.Vlans.VlansEntry
	8,  // 7: types.HealthPoint.topics:type_name -> types.Topics
	4,  // 8: types.HealthPoint.status:type_name -> types.HealthState
	11, // 9: types.HealthPoint.stats:type_name -> types.HealthPointStats
	9,  // 10: types.Topics.TopicToVlanEntry.value:type_name -> types.Vlans
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthPointStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
